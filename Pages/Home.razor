@page "/"
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Three.js Demo</PageTitle>

<div class="control-panel">
    <div class="color-picker">
        <label for="colorPicker">Cube Color:</label>
        <input type="color" id="colorPicker" @bind="selectedColor" @bind:after="UpdateCubeColor" />
    </div>
    <div class="rotation-count">
        Completed Rotations: @rotationCount
    </div>
</div>

<div @ref="container" style="width: 100%; height: 100vh;"></div>

@code {
    private ElementReference container;
    private IJSObjectReference? module;
    private string selectedColor = "#00ff00";
    private int rotationCount = 0;
    private DotNetObjectReference<Home>? objectReference;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objectReference = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("threeJsInterop.initialize", container, objectReference);
        }
    }

    private async Task UpdateCubeColor()
    {
        await JSRuntime.InvokeVoidAsync("threeJsInterop.setCubeColor", selectedColor);
    }

    [JSInvokable]
    public void OnRotationComplete()
    {
        rotationCount++;
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await JSRuntime.InvokeVoidAsync("threeJsInterop.dispose");
            await module.DisposeAsync();
        }
        
        objectReference?.Dispose();
    }
}
